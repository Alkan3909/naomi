%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

variables:
  commonIdentifier: |
    [a-z\x{7f}-\x{ff}_]
    [a-z\x{7f}-\x{ff}0-9_]*

scope: ...

contexts:
  main:
    - match: (?i)\bfunction(?!\\)\b
      scope: keyword.structure.function.php
      set: declaration

  declaration:
    - meta_scope: function.php
    # Function without body.
    - match: ;
      scope: punctuation.delimiter.structure.function.declaration.end.php
      pop: true
    # Function's name.
    - include: magic-functions
    - match: (?xi)\b{{commonIdentifier}}\b
      scope: entity.name.structure.function.php
    # Parameters followed by the function's return type-hint.
    - match: \(
      scope: punctuation.delimiter.structure.function.parameters.begin.php
      push: [
        return-type-hint,
        parameters
      ]
    # Body.
    - match: \{
      scope: >-
        function.body.php
        punctuation.delimiter.structure.function.body.begin.php
      set: body

  magic-functions:
    - match: |
        (?x)
        (?> __construct
          | __destruct
          | __callStatic
          | __call
          | __get
          | __set
          | __isset
          | __unset
          | __sleep
          | __wakeup
          | __toString
          | __invoke
          | __set_state
          | __clone
          | __debugInfo
        )
      scope: >-
        support.function.php
        entity.name.structure.function.php

  parameters:
    - meta_scope: function.parameters.php
    - meta_content_scope: function.parameters.content.php
    - include: php7.comments.no-pop.sublime-syntax
    - match: \)
      scope: punctuation.delimiter.structure.function.parameters.end.php
      pop: true
    # Starts with a variable.
    - match: (?=\$)
      push: [
        param-delimiter,
        param-optional-default-value,
        param-variable
      ]
    # Starts with a variadic operator.
    - match: (?=\.\.\.)
      push: [
        param-delimiter,
        param-optional-default-value,
        param-variable,
        param-variadic-operator
      ]
    # Starts with a type hint.
    - match: (?=\S)
      push: [
        param-delimiter,
        param-optional-default-value,
        param-variable,
        param-variadic-operator,
        param-type
      ]

  param-type:
    - include: php7.comments.no-pop.sublime-syntax
    - include: php7.type.sublime-syntax

  param-variadic-operator:
    - include: php7.comments.no-pop.sublime-syntax
    - match: (?=\$)
      pop: true
    - match: \.\.\.
      scope: keyword.operator.variadic.php
      pop: true

  param-variable:
    - include: php7.comments.no-pop.sublime-syntax
    - include: php7.variable.sublime-syntax

  param-optional-default-value:
    - include: php7.comments.no-pop.sublime-syntax
    - match: (?=,|\))
      pop: true
    - match: \=
      scope: keyword.operator.php
      set: param-default-value

  param-default-value:
    - include: php7.comments.no-pop.sublime-syntax
    - match: (?=,|\))
      pop: true
    - include: php7.constant.sublime-syntax
    - include: php7.string.sublime-syntax

  param-delimiter:
    - include: php7.comments.no-pop.sublime-syntax
    - match: (?=\))
      pop: true
    - match: ","
      scope: punctuation.delimiter.structure.function.parameters.php
      pop: true

  return-type-hint:
    - include: php7.comments.no-pop.sublime-syntax
    - match: (?={|;)
      pop: true
    - match: ":"
      scope: punctuation.delimiter.structure.function.php
      set: return-type

  return-type:
    - include: php7.comments.no-pop.sublime-syntax
    - match: (?={|;)
      pop: true
    - include: php7.type.sublime-syntax

  body:
    - meta_content_scope: >-
        function.php
        function.body.php
        function.body.content.php
    - match: \{
      push: balance-brackets
    - match: \}
      scope: >-
        function.php
        function.body.php
        punctuation.delimiter.structure.function.body.end.php
      pop: true
    - include: expected-structures

  balance-brackets:
    - match: \{
      push: balance-brackets
    - match: \}
      pop: true
    - include: expected-structures

  expected-structures:
    - match: ""
      push:
        - include: php7.comments.sublime-syntax
        - include: php7.operator.sublime-syntax
        - include: php7.constant.sublime-syntax
        - include: php7.keyword.sublime-syntax
        - include: php7.class.sublime-syntax
        - include: php7.function.sublime-syntax
        - include: php7.new-object.sublime-syntax
        - include: php7.function-call.sublime-syntax
        - include: php7.variable.sublime-syntax
        - include: php7.type.sublime-syntax
        - match: ""
          pop: true

