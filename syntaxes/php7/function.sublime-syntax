%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

variables:
  commonIdentifier: |
    [a-z\x{7f}-\x{ff}_]
    [a-z\x{7f}-\x{ff}0-9_]*

scope: ...

contexts:
  main:
    - match: (?i)\bfunction(?!\\)\b
      scope: keyword.statement.function.php.7
      set: declaration

  declaration:
    - meta_scope: statement.function.php.7
    # Function without body.
    - match: ;
      scope: punctuation.delimiter.statement.function.declaration.end.php.7
      pop: true
    # Function's name.
    - include: magic-method
    - match: (?xi)\b{{commonIdentifier}}\b
      scope: entity.name.statement.function.php.7
    # Parameters, imported variables and return type.
    - match: \(
      scope: punctuation.delimiter.statement.function.parameters.begin.php.7
      push: [
        return-type-hint,
        possible-imported-variables,
        parameters
      ]
    # Body.
    - match: \{
      scope: >-
        statement.function.body.php.7
        punctuation.delimiter.statement.function.body.begin.php.7
      set: body

  magic-method:
    - match: |
        (?x)
        (?> __construct
          | __destruct
          | __call(?:Static)?
          | __get
          | __set(?:_state)?
          | __isset
          | __unset
          | __sleep
          | __wakeup
          | __toString
          | __invoke
          | __clone
          | __debugInfo
        )
      scope: >-
        statement.function.php.7
        entity.name.statement.support.function.php.7

  parameters:
    - meta_scope: statement.function.parameters.php.7
    - meta_content_scope: statement.function.parameters.content.php.7
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - match: \)
      scope: punctuation.delimiter.statement.function.parameters.end.php.7
      pop: true
    # Starts with a variable.
    - match: (?=\$)
      push: [
        param-delimiter,
        param-optional-default-value,
        param-variable
      ]
    # Starts with a variadic or reference operator.
    - match: (?=\.\.\.|&)
      push: [
        param-delimiter,
        param-optional-default-value,
        param-variable,
        variadic-or-reference-operator
      ]
    # Starts with a type hint.
    - match: (?=\S)
      push: [
        param-delimiter,
        param-optional-default-value,
        param-variable,
        variadic-or-reference-operator,
        variable-type
      ]

  possible-imported-variables:
    - match: (?=;|:|{)
      pop: true
    - match: use
      scope: keyword.import.variable.php.7
      set: imported-variables-begin

  imported-variables-begin:
    - match: \(
      scope: punctuation.delimiter.statement.imported.variables.begin.php.7
      set: imported-variables

  imported-variables:
    - meta_scope: statement.function.imported.variables.php.7
    - meta_content_scope: statement.function.imported.variables.content.php.7
    - match: \)
      scope: punctuation.delimiter.statement.imported.variables.end.php.7
      pop: true
    # Starts with a variable.
    - match: (?=\$)
      push: [
        target-delimiter,
        target-variable,
      ]
    # Starts with a reference operator.
    - match: (?=&)
      push: [
        target-delimiter,
        target-variable,
        reference-operator
      ]

  reference-operator:
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - match: (?=\$)
      pop: true
    - match: \&
      scope: keyword.operator.reference.php.7
      pop: true

  variable-type:
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/php7/type.sublime-syntax

  variadic-or-reference-operator:
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - match: (?=\$)
      pop: true
    - match: \&
      scope: keyword.operator.reference.php.7
      pop: true
    - match: \.\.\.
      scope: keyword.operator.variadic.php.7
      pop: true

  target-delimiter:
    - include: param-delimiter

  target-variable:
    - include: param-variable

  param-variable:
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/php7/variable.sublime-syntax

  param-optional-default-value:
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - match: (?=,|\))
      pop: true
    - match: \=
      scope: keyword.operator.php.7
      set: param-default-value

  param-default-value:
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - match: (?=,|\))
      pop: true
    - include: Packages/Naomi/syntaxes/php7/constant.sublime-syntax
    - include: Packages/Naomi/syntaxes/php7/literal.sublime-syntax
    # Constant inside statement.class.
    - match: |
        (?xi)
        (?={{commonIdentifier}})
      push: [
        default-value-constant,
        default-value-scope-operator,
        default-value-type
      ]

  default-value-type:
    - include: Packages/Naomi/syntaxes/php7/type.sublime-syntax

  default-value-scope-operator:
    - match: "::"
      scope: keyword.operator.scope.resolution.php.7
      pop: true

  default-value-constant:
    - include: Packages/Naomi/syntaxes/php7/constant.sublime-syntax

  param-delimiter:
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - match: (?=\))
      pop: true
    - match: ","
      scope: punctuation.delimiter.statement.function.parameters.php.7
      pop: true

  return-type-hint:
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - match: (?={|;)
      pop: true
    - match: ":"
      scope: punctuation.delimiter.statement.function.php.7
      set: return-type

  return-type:
    - include: Packages/Naomi/syntaxes/php7/comment.no-pop.sublime-syntax
    - match: (?={|;)
      pop: true
    - include: Packages/Naomi/syntaxes/php7/type.sublime-syntax

  body:
    - meta_content_scope: >-
        statement.function.php.7
        statement.function.body.php.7
        statement.function.body.content.php.7
    - match: \{
      push: balance-brackets
    - match: \}
      scope: >-
        statement.function.php.7
        statement.function.body.php.7
        punctuation.delimiter.statement.function.body.end.php.7
      pop: true
    - include: body-content

  body-content:
    - match: (?=\S)
      push:
        - include: Packages/Naomi/syntaxes/php7/comment.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/literal.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/constant.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/operator.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/declare.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/keyword.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/class.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/function.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/new-object.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/function-call.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/variable.sublime-syntax
        - include: Packages/Naomi/syntaxes/php7/type.sublime-syntax
        - match: (?=\{|\})
          pop: true

  balance-brackets:
    - match: \{
      push: balance-brackets
    - match: \}
      pop: true
    - include: body-content
