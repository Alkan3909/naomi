%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [a-z\x{7f}-\x{ff}_]
    [a-z\x{7f}-\x{ff}0-9_]*

  octalEscapedChar: |
    \\[0-7]{1,3}

  hexEscapedChar: |
    \\x[a-f0-9]{1,2}

  unicodeEscapedChar: |
    \\u\{[a-f0-9]+\}

  singleQuotedEscapeSequences: |
    (?> \\\\
      | \\'
    )

  doubleQuotedEscapeSequences: |
    (?> \\\\
      | \\"
      | \\n
      | \\r
      | \\t
      | \\v
      | \\e
      | \\f
      | \\\$
      | {{octalEscapedChar}}
      | {{hexEscapedChar}}
      | {{unicodeEscapedChar}}
    )

  heredocEscapeSequences: |
    (?> \\\\
      | \\n
      | \\r
      | \\t
      | \\v
      | \\e
      | \\f
      | \\\$
      | {{octalEscapedChar}}
      | {{hexEscapedChar}}
      | {{unicodeEscapedChar}}
    )

  simpleEmbeddedVariable: |
    (\$)({{commonIdentifier}})
    (?:
      (\[)([^\]]*)(\])
    )*

contexts:
  main:
    # Single quoted.
    - match: \'
      scope: punctuation.delimiter.string.begin.php
      set: single-quoted-string
    # Double quoted.
    - match: \"
      scope: punctuation.delimiter.string.begin.php
      set: double-quoted-string
    # Nowdoc.
    - match: (?xi)<<<'({{commonIdentifier}})'
      scope: punctuation.delimiter.string.begin.php
      set: nowdoc-string
    # Heredoc.
    - match: (?xi)<<<({{commonIdentifier}})
      scope: punctuation.delimiter.string.begin.php
      set: heredoc-string

  single-quoted-string:
    - meta_scope: string.quoted.single.php
    - meta_content_scope: string.content.php
    - match: (?<!\\)\'
      scope: punctuation.delimiter.string.end.php
      pop: true
    - include: single-quoted-escaped-character

  single-quoted-escaped-character:
    - match: |
        (?x)
        (?>
          ({{singleQuotedEscapeSequences}})\s*
          ({{singleQuotedEscapeSequences}})
          |
          ({{singleQuotedEscapeSequences}})
        )
      captures:
        1: constant.character.escape.a.php
        2: constant.character.escape.b.php
        3: constant.character.escape.a.php

  double-quoted-string:
    - meta_scope: string.quoted.double.php
    - meta_content_scope: string.content.php
    - match: (?<!\\)\"
      scope: punctuation.delimiter.string.end.php
      pop: true
    - include: double-quoted-escaped-character
    - include: simple-embedded-variable

  double-quoted-escaped-character:
    - match: |
        (?x)
        (?>
          ({{doubleQuotedEscapeSequences}})\s*
          ({{doubleQuotedEscapeSequences}})
          |
          ({{doubleQuotedEscapeSequences}})
        )
      captures:
        1: constant.character.escape.a.php
        2: constant.character.escape.b.php
        3: constant.character.escape.a.php

  nowdoc-string:
    - meta_scope: string.unquoted.nowdoc.php
    - meta_content_scope: string.content.php
    - match: ^\1;
      scope: punctuation.delimiter.string.end.php
      pop: true

  heredoc-string:
    - meta_scope: string.unquoted.heredoc.php
    - meta_content_scope: string.content.php
    - match: ^\1;
      scope: punctuation.delimiter.string.end.php
      pop: true
    - include: heredoc-escaped-character
    - include: simple-embedded-variable

  heredoc-escaped-character:
    - match: |
        (?x)
        (?>
          ({{heredocEscapeSequences}})\s*
          ({{heredocEscapeSequences}})
          |
          ({{heredocEscapeSequences}})
        )
      captures:
        1: constant.character.escape.a.php
        2: constant.character.escape.b.php
        3: constant.character.escape.a.php

  simple-embedded-variable:
    - match: |
        (?xi)
        (?>
          ({{simpleEmbeddedVariable}})\s*
          ({{simpleEmbeddedVariable}})
          |
          ({{simpleEmbeddedVariable}})
        )
      captures:
        1: variable.a.php
        2: punctuation.variable.begin.php
        3: entity.name.variable.php
        4: operator.subscript.begin.php
        5: array.key.php
        6: operator.subscript.end.php

        7: variable.b.php
        8: punctuation.variable.begin.php
        9: entity.name.variable.php
        10: operator.subscript.begin.php
        11: array.key.php
        12: operator.subscript.end.php

        13: variable.a.php
        14: punctuation.variable.begin.php
        15: entity.name.variable.php
        16: operator.subscript.begin.php
        17: array.key.php
        18: operator.subscript.end.php
