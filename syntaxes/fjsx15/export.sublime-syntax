%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  keywords: |
    (?> await
      | break
      | case
      | catch
      | class
      | const
      | continue
      | debugger
      | delete
      | do
      | else
      | enum
      | export
      | extends
      | finally
      | for
      | function
      | if
      | imp(?>lements|ort)
      | in(?:stanceof)?
      | interface
      | let
      | new
      | package
      | private
      | protected
      | public
      | return
      | static
      | super
      | switch
      | this
      | throw
      | try
      | typeof
      | var
      | void
      | while
      | with
      | yield
    )

contexts:
  main:
    # Export multiple types.
    - match: |
        (?x)
        \s*(export)
        (?:\s*(opaque))?
        \s*(type)
        \s*({)
      captures:
        1: keyword.control.export.js.fjsx15
        2: >-
          flowtype
          storage.type.flowtype
          keyword.other.access.flowtype
        3: >-
          flowtype
          storage.type.flowtype
          keyword.declaration.type-aliasing.flowtype
        4: punctuation.definition.export.list.begin.js.fjsx15
      set: types
    # Export object literal.
    - match: |
        (?x)
        \s*(export)
        \s*(default)
        (?=\s*{)
      captures:
        1: keyword.control.export.js.fjsx15
        2: >-
          storage.modifier.js.fjsx15
          keyword.control.export.default.js.fjsx15
      set: object-literal
    # Export default from.
    - match: |
        (?x)
        \s*(export)
        \s*(default)
        (?=\s*from)
      captures:
        1: keyword.control.export.js.fjsx15
        2: >-
          storage.modifier.js.fjsx15
          keyword.control.export.default.js.fjsx15
      set: origin
    # Export statements.
    - match: |
        (?x)
        \s*(export)
        (?=
          (?:\s*opaque)?
          \s*(?> async
            | class
            | const
            | function
            | interface
            | let
            | type
            | var
          )
        )
      captures:
        1: keyword.control.export.js.fjsx15
      # set: statement-and-expression
    # Export default.
    - match: |
        (?x)
        \s*(export)
        \s*(default)
      captures:
        1: keyword.control.export.js.fjsx15
        2: >-
          storage.modifier.js.fjsx15
          keyword.control.export.default.js.fjsx15
      # set: statement-and-expression
    # Other.
    - match: |
        (?x)
        \s*(export)\b
        (?!\s*\.)
      captures:
        1: keyword.control.export.js.fjsx15
      set: targets

  comment:
    - include: Packages/Naomi/syntaxes/fjsx15/comment.no-pop.sublime-syntax

  # statement-and-expression:
  #   - include: Packages/Naomi/syntaxes/fjsx15/statement-and-expression.sublime-syntax

  object-literal:
    - include: Packages/Naomi/syntaxes/fjsx15/literal/object.sublime-syntax

  origin:
    - match: \s*(from)\b
      captures:
        1: keyword.control.export.origin.js.fjsx15
      set: origin-path

  origin-path:
    - include: Packages/Naomi/syntaxes/fjsx15/literal/string/double-quoted.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/literal/string/single-quoted.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/literal/string/template.sublime-syntax

  export-list-begin:
    - match: \s*(\{)
      captures:
        1: punctuation.definition.export.list.begin.js.fjsx15
      set: export-list

  export-list:
    - match: \s*(})
      captures:
        1: punctuation.definition.export.list.end.js.fjsx15
      set: comma-origin-escape
    - match: ""
      push:
        - include: targets
        - match: ""
          pop: true

  comma:
    - match: \s*(,)
      captures:
        1: punctuation.definition.export.item.js.fjsx15

  targets:
    - include: comment
    - include: origin
    - include: export-list-begin
    - include: comma
    - include: alias
    # Default.
    - match: \s*(default)\b
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.control.export.default.js.fjsx15
    # All.
    - match: \s*(\*)
      captures:
        1: keyword.operator.other.export.all.js.fjsx15
    # Simple.
    - match: |
        (?xi)\s*
        (?!{{keywords}})
        ({{commonIdentifier}})
      captures:
        1: >-
          export.js.fjsx15
          entity.name.ambiguous.js.fjsx15
      set: alias-comma-origin-escape
    - match: (?=\s*\S)
      pop: true

  comma-origin-escape:
    - match: (?=\s*(?>,|from))
      set: targets
    - match: (?=\s*\S)
      pop: true

  alias-comma-origin-escape:
    - match: (?=\s*(?>,|as|from))
      set: targets
    - match: (?=\s*\S)
      pop: true

  alias:
    - match: \s*(as)\b
      captures:
        1: keyword.other.alias.js.fjsx15
      set: alias-name

  alias-name:
    - match: |
        (?xi)\s*
        ({{commonIdentifier}})
      captures:
        1: entity.name.alias.js.fjsx15
      pop: true

  types:
    - match: \s*(,)
      captures:
        1: punctuation.definition.export.item.js.fjsx15
    - match: \s*(})
      captures:
        1: punctuation.definition.export.list.end.js.fjsx15
      pop: true
    - include: alias
    - include: type

  type:
    - match: |
        (?xi)
        (?={{commonIdentifier}})
      push: simple-type

  simple-type:
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/simple.sublime-syntax
