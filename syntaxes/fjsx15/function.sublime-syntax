%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

contexts:
  main:
    # Simple function without identifier.
    - match: |
        (?x)\s*
        (?:
          (async)\s+
        )?
        (function)
        (?=
          \s*\*?
          \s*\(
        )
      captures:
        1: keyword.other.async.js.fjsx15
        2: >-
          storage.type.js.fjsx15
          keyword.declaration.function.js.fjsx15
      set: declaration
    # Simple function with identifier.
    - match: |
        (?x)\s*
        (?:
          (async)\s+
        )?
        (function)
        (?=
          \s*\*?
          \s*{{commonIdentifier}}
          \s*\(
        )
      captures:
        1: keyword.other.async.js.fjsx15
        2: >-
          storage.type.js.fjsx15
          keyword.declaration.function.js.fjsx15
      set: declaration
    # Templated function without identifier.
    - match: |
        (?x)\s*
        (?:
          (async)\s+
        )?
        (function)
        (?=
          \s*\*?
          \s*<.*>\s*\(
        )
      captures:
        1: keyword.other.async.js.fjsx15
        2: >-
          storage.type.js.fjsx15
          keyword.declaration.function.js.fjsx15
      set: declaration
    # Templated function with identifier.
    - match: |
        (?x)\s*
        (?:
          (async)\s+
        )?
        (function)
        (?=
          \s*\*?
          \s*{{commonIdentifier}}
          \s*<.*>\s*\(
        )
      captures:
        1: keyword.other.async.js.fjsx15
        2: >-
          storage.type.js.fjsx15
          keyword.declaration.function.js.fjsx15
      set: declaration

  declaration:
    - include: comment
    # Body.
    - match: (?=\s*\{)
      set: body
    # Template parameters.
    - match: (?=\s*<)
      push: template-parameters
    # Parameters.
    - match: (?=\s*\()
      push: parameters
    # Identifier.
    - match: |
        (?xi)\s*
        (\*)?
        (?:
          \s*
          ({{commonIdentifier}})
        )?
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.operator.other.generator.js.fjsx15
        2: entity.name.function.js.fjsx15
    # None of the expected items matched, it probably ended.
    - match: (?=\s*\S)
      pop: true

  comment:
    - include: Packages/Naomi/syntaxes/fjsx15/comment.no-pop.sublime-syntax

  template-parameters:
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/template/parameters.sublime-syntax

  parameters:
    - include: Packages/Naomi/syntaxes/fjsx15/function/parameters.sublime-syntax

  body:
    - include: Packages/Naomi/syntaxes/fjsx15/function/body.sublime-syntax
