%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  methodIdentifier: |
    (?> {{commonIdentifier}}
      | '.*?(?<!\\)'
      | ".*?(?<!\\)"
      | `.*?(?<!\\)`
      | \[.*?]
    )

contexts:
  main:
    # Static variables.
    - match: |
        (?xi)\s*
        (static)
        (?=
          \s+{{commonIdentifier}}
        )
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.other.access.js.fjsx15
      set: declaration
    # Normal variable.
    - match: |
        (?xi)
        (?=
          {{commonIdentifier}}
        )
      set: declaration

  declaration:
    - include: terminator
    # Type.
    - match: (?=\s*:)
      push: type
    # Value.
    - match: (?=\s*=)
      set: value
    # Identifier.
    - match: |
        (?xi)
        (?=\s*
          {{commonIdentifier}}
        )
      push:
        - include: Packages/Naomi/syntaxes/fjsx15/constant.sublime-syntax
        - include: Packages/Naomi/syntaxes/fjsx15/variable.sublime-syntax

  type:
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/associated-type.sublime-syntax

  value:
    - include: terminator
    - match: (?<=})
      pop: true
    - match: (?=})
      pop: true
    # Another property.
    - match: |
        (?xi)
        (?=\s*
          (?:
            static\s+
          )?
          {{commonIdentifier}}
          .*=
        )
      pop: true
    # Method
    - match: |
        (?xi)
        (?=\s*
          (?:
            (?> async
              | get
              | s
                (?> et
                  | tatic
                    (?:
                      \s+(?>async|get|set)
                    )?
                )
            )
          )?
          \s*\*?
          \s*{{methodIdentifier}}
          \s*\(.*\)
          .*?
          \s*{
        )
      pop: true
    # Value.
    - match: ""
      push:
        - match: \s*
          pop: true
        - include: statement-and-expression

  terminator:
    - include: Packages/Naomi/syntaxes/fjsx15/terminator.sublime-syntax

  statement-and-expression:
    - include: Packages/Naomi/syntaxes/fjsx15/statement-and-expression.sublime-syntax
