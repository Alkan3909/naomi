%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  methodIdentifier: |
    (?> {{commonIdentifier}}
      | '.*?(?<!\\)'
      | ".*?(?<!\\)"
      | `.*?(?<!\\)`
    )

  modifiers: |
    (?:
      ((?>async|get|set|static))\b
      \s*\g<-1>?
    )

  templateArguments: |
    (<
      [^<>]*
      \g<-1>?
      [^<>]*
    >)

  parameters: |
    (\(
      [^()]*
      \g<-1>?
      [^()]*
    \))

  flowOperators: |
    (?> &(?!&)
      | \|(?!\|)
    )

  string: |
    (?> '.*?'
      | ".*?"
      | `.*`
    )

  simpleFlowType: |
    (?> {{string}}
      | {{commonIdentifier}}
        {{templateArguments}}?
    )

  flowFunction: |
    (
      {{parameters}}
      \s*=>\s*
      (?> {{simpleFlowType}}
        | \g<-2>
      )
    )

  complexType: |
    (
      \??\s*
      (?> {{simpleFlowType}}
        | {{flowFunction}}
      )
      \s*{{flowOperators}}?
      \s*\g<-5>?
    )

  flowComment: /\*\s*:.*?\*/

  returnType: |
    (?> {{flowComment}}
      | (?::{{complexType}})
    )?

contexts:
  main:
    # Normal method.
    - match: |
        (?xi)
        (?=
          \s*{{modifiers}}?
          \s*\*?
          \s*{{methodIdentifier}}?
          \s*{{templateArguments}}?
          \s*\(
        )
      set: [
        declaration,
        modifiers
      ]
    # Class instance property.
    - match: |
        (?xi)
        (?=
          \s*{{commonIdentifier}}
          \s*=
          \s*{{modifiers}}?
          \s*{{templateArguments}}?
          \s*{{parameters}}?
          \s*{{returnType}}?
          \s*=>
        )
      set: [
        arrow-function,
        class-instance-identifier
      ]

  modifiers:
    - match: \s*(async)
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.other.async.js.fjsx15
    - match: \s*(get|set)
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.other.proxy.js.fjsx15
    - match: \s*(static)
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.other.access.js.fjsx15
    - match: \s*(\*)
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.operator.other.generator.js.fjsx15
    - match: ""
      pop: true

  class-instance-identifier:
    - match: |
        (?xi)
        \s*({{commonIdentifier}})
        \s*(=)
      captures:
        1: entity.name.function.js.fjsx15
        2: punctuation.delimiter.function.js.fjsx15
      pop: true

  arrow-function:
    - include: Packages/Naomi/syntaxes/fjsx15/arrow-function.sublime-syntax

  declaration:
    # Body.
    - match: (?=\s*\{)
      set: body
    # Template parameters.
    - match: (?=\s*<)
      push: template-parameters
    # Parameters.
    - match: (?=\s*\()
      push: parameters
    # Support identifier.
    - match: |
        (?x)
        \s*(constructor)\b
      captures:
        1: >-
          support.js.fjsx15
          entity.name.function.js.fjsx15
    # React JS’s support methods.
    - include: Packages/Naomi/syntaxes/fjsx15/class/reactjs.sublime-syntax
    # Identifier.
    - match: |
        (?xi)
        \s*(\*)?
        \s*({{commonIdentifier}})
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.operator.other.generator.js.fjsx15
        2: entity.name.function.js.fjsx15
    # Computed identifier.
    - match: |
        (?x)
        (?:
          \s*(\*)
        )?
        \s*(\[)
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.operator.other.generator.js.fjsx15
        2: keyword.operator.other.computed-function.begin.js.fjsx15
      push: computed-function
    # String identifiers
    - match: (?=(?>'|"|`))
      push:
        - include: Packages/Naomi/syntaxes/fjsx15/literal/string/double-quoted.sublime-syntax
        - include: Packages/Naomi/syntaxes/fjsx15/literal/string/single-quoted.sublime-syntax
        - include: Packages/Naomi/syntaxes/fjsx15/literal/string/template.sublime-syntax
    # None of the expected items matched, it probably ended.
    - match: (?=\s*\S)
      pop: true

  template-parameters:
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/template/parameters.sublime-syntax

  parameters:
    - include: Packages/Naomi/syntaxes/fjsx15/function/parameters.sublime-syntax

  body:
    - include: Packages/Naomi/syntaxes/fjsx15/function/body.sublime-syntax

  computed-function:
    - match: \s*(])
      captures:
        1: keyword.operator.other.computed-function.end.js.fjsx15
      pop: true
    - match: ""
      push:
        - match: (?=\s*])
          pop: true
        - include: statement-and-expression

  statement-and-expression:
    - include: Packages/Naomi/syntaxes/fjsx15/statement-and-expression.sublime-syntax
