%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  methodIdentifier: |
    (?> {{commonIdentifier}}
      | '.*?(?<!\\)'
      | ".*?(?<!\\)"
      | `.*?(?<!\\)`
      | \[.*?]
    )

contexts:
  main:
    # Class instance property.
    - match: |
        (?xi)
        (?=
          \s*{{commonIdentifier}}
          \s*=
          \s*
            (?> \(.*\)
              | {{commonIdentifier}}
            )
          \s*=>
        )
      set: [
        arrow-function,
        class-instance-identifier
      ]
    # No modifiers.
    - match: |
        (?xi)
        (?=
          \s*\*?
          \s*{{methodIdentifier}}
          \s*\(
        )
      set: declaration
    # With modifiers.
    - match: |
        (?xi)\s*
        (
          (?> async
            | get
            | s
              (?> et
                | tatic
                  (?:
                    \s+(?>async|get|set)
                  )?
              )
          )
        )
        (?=
          \s*\*?
          \s*{{methodIdentifier}}
          \s*\(
        )
      captures:
        1: keyword.modifier.js.fjsx15
      set: declaration

  class-instance-identifier:
    - match: |
        (?xi)
        \s*({{commonIdentifier}})
        \s*(=)
      captures:
        1: entity.name.function.js.fjsx15
        2: punctuation.delimiter.function.js.fjsx15
      pop: true

  arrow-function:
    - include: Packages/Naomi/syntaxes/fjsx15/arrow-function.sublime-syntax

  declaration:
    - match: (?=\s*;)
      pop: true
    # Body.
    - match: (?=\s*\{)
      set: body
    # Template parameters.
    - match: (?=\s*<)
      push: template-parameters
    # Parameters.
    - match: (?=\s*\()
      push: parameters
    # Support identifier.
    - match: |
        (?x)
        \s*(constructor)\b
      captures:
        1: >-
          support.js.fjsx15
          entity.name.function.js.fjsx15
    # Identifier.
    - match: |
        (?xi)
        \s*(\*)?
        \s*({{commonIdentifier}})
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.generator.js.fjsx15
        2: entity.name.function.js.fjsx15
    # Computed identifier.
    - match: |
        (?x)
        (?:
          \s*(\*)
        )?
        \s*(\[)
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.generator.js.fjsx15
        2: keyword.operator.other.computed-function.begin.js.fjsx15
      push: computed-function
    # Other identifier types.
    - match: ""
      push:
        - match: (?=\s*{)
          pop: true
        - include: Packages/Naomi/syntaxes/fjsx15/literal/string/double-quoted.sublime-syntax
        - include: Packages/Naomi/syntaxes/fjsx15/literal/string/single-quoted.sublime-syntax
        - include: Packages/Naomi/syntaxes/fjsx15/literal/string/template.sublime-syntax

  template-parameters:
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/template/parameters.sublime-syntax

  parameters:
    - include: Packages/Naomi/syntaxes/fjsx15/function/parameters.sublime-syntax

  body:
    - include: Packages/Naomi/syntaxes/fjsx15/function/body.sublime-syntax

  computed-function:
    - match: \s*(])
      captures:
        1: keyword.operator.other.computed-function.end.js.fjsx15
      pop: true
    - match: ""
      push:
        - match: (?=\s*])
          pop: true
        - include: statement-and-expression

  statement-and-expression:
    - include: Packages/Naomi/syntaxes/fjsx15/statement-and-expression.sublime-syntax
