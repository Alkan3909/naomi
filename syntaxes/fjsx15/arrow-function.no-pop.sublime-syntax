%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  templateArguments: |
    (<
      [^<>]*
      \g<-1>?
      [^<>]*
    >)

  parameters: |
    (\(
      [^()]*
      \g<-1>?
      [^()]*
    \))

  flowOperators: |
    (?> &(?!&)
      | \|(?!\|)
    )

  string: |
    (?> '.*?'
      | ".*?"
      | `.*`
    )

  simpleFlowType: |
    (?> {{string}}
      | {{commonIdentifier}}
        {{templateArguments}}?
    )

  flowFunction: |
    (
      {{parameters}}
      \s*=>\s*
      (?> {{simpleFlowType}}
        | \g<-2>
      )
    )

  complexType: |
    (
      \??\s*
      (?> {{simpleFlowType}}
        | {{flowFunction}}
      )
      \s*{{flowOperators}}?
      \s*\g<-5>?
    )

  flowComment: /\*\s*:.*?\*/

  returnType: |
    (?> {{flowComment}}
      | (?::{{complexType}})
    )?

contexts:
  main:
    # Normal arrow function assigned to variable/constant.
    - match: |
        (?xi)
        \s*((?>const|let|var)\b)?
        \s*({{commonIdentifier}})
        \s*(=)
        \s*(async)?
        (?=
          \s*{{templateArguments}}?
          \s*{{parameters}}
          \s*{{returnType}}
          \s*=>
        )
      captures:
        1: >-
          storage.type.js.fjsx15
          keyword.declaration.variable.js.fjsx15
        2: entity.name.function.js.fjsx15
        3: punctuation.delimiter.function.assignment.js.fjsx1
        4: >-
          storage.modifier.js.fjsx15
          keyword.other.async.js.fjsx15
      push: [
        body,
        template-and-parameters
      ]
    # Single parameter arrow function assigned to variable.
    - match: |
        (?xi)
        \s*((?>const|let|var)\b)?
        \s*({{commonIdentifier}})
        \s*(=)
        \s*(async)?
        (?=
          \s*{{commonIdentifier}}
          \s*{{returnType}}
          \s*=>
        )
      captures:
        1: >-
          storage.type.js.fjsx15
          keyword.declaration.variable.js.fjsx15
        2: entity.name.function.js.fjsx15
        3: punctuation.delimiter.function.assignment.js.fjsx1
        4: >-
          storage.modifier.js.fjsx15
          keyword.other.async.js.fjsx15
      push: [
        body,
        single-parameter
      ]
    # Normal arrow function.
    - match: |
        (?xi)
        \s*(async)?
        (?=
          \s*{{templateArguments}}?
          \s*{{parameters}}
          \s*{{returnType}}
          \s*=>
        )
      captures:
        1: >-
          storage.modifier.js.fjsx15
          keyword.other.async.js.fjsx15
      push: [
        body,
        template-and-parameters
      ]
    # Single parameter.
    - match: |
        (?xi)
        \s*(async)?
        (?=
          \s*{{commonIdentifier}}
          \s*{{returnType}}
          \s*=>
        )
      captures:
        1: keyword.other.async.js.fjsx15
      push: [
        body,
        single-parameter
      ]

  single-parameter:
    - match: (?=\s*=>)
      pop: true
    - match: ""
      push:
        - include: Packages/Naomi/syntaxes/fjsx15/flowtype/associated-type.sublime-syntax
        # Parameter.
        - match: |
            (?xi)
            ({{commonIdentifier}})(\?)?
          captures:
            0: function.parameter.js.fjsx15
            1: entity.name.variable.js.fjsx15
            2: keyword.operator.other.optional.flowtype
          pop: true

  template-and-parameters:
    - include: Packages/Naomi/syntaxes/fjsx15/function/parameters.sublime-syntax
    - match: ""
      push:
        - include: Packages/Naomi/syntaxes/fjsx15/flowtype/template/parameters.sublime-syntax
        - match: ""
          pop: true

  body:
    - include: Packages/Naomi/syntaxes/fjsx15/arrow-function/body.sublime-syntax
