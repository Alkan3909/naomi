%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*
  expressionGroupBegin: \s*(\()
  expressionBegin: (?=\s*\S)

contexts:
  main:
    - include: comment-no-pop
    - include: comma
    # At this stage, regex literals will have a higher priority than operators.
    - match: (?=\s*/.*?(?<!\\)/[a-z]{0,5})
      set: [ optional-tail, regex-literal ]
    # Detect operators as soon as possible.
    - include: Packages/Naomi/syntaxes/fjsx15/operator.sublime-syntax
    # Open new expression group.
    - match: "{{expressionGroupBegin}}"
      captures:
        1: punctuation.definition.expression.group.begin.js.fjsx15
      set: open-group
    # Start of the expression.
    - match: "{{expressionBegin}}"
      set: [ optional-tail, head ]

  comma:
    - include: Packages/Naomi/syntaxes/fjsx15/operator/comma.sublime-syntax

  comment-no-pop:
    - include: Packages/Naomi/syntaxes/fjsx15/comment.no-pop.sublime-syntax

  optional-expression:
    - include: Packages/Naomi/syntaxes/fjsx15/optional-expression.sublime-syntax

  regex-literal:
    - include: Packages/Naomi/syntaxes/fjsx15/literal/string/regex.sublime-syntax

  type-cast:
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/cast.sublime-syntax

  open-group:
    - include: comment-no-pop
    # Comma operator.
    - match: (?=\s*,)
      push: comma
    # Type cast.
    - match: (?=\s*:)
      set: [ close-group, type-cast ]
    # Open new expression group.
    - match: "{{expressionGroupBegin}}"
      captures:
        1: punctuation.definition.expression.group.begin.js.fjsx15
      push: open-group
    # Close the current expression group.
    - include: close-group
    # Start of the expression.
    - match: "{{expressionBegin}}"
      push: optional-expression

  close-group:
    - match: \s*(\))
      captures:
        1: punctuation.definition.expression.group.end.js.fjsx15
      set: optional-tail

  globals:
    - include: Packages/Naomi/syntaxes/fjsx15/core.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/node-js.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/react-js.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/jest.sublime-syntax

  head:
    - include: comment-no-pop
    - include: globals
    - include: Packages/Naomi/syntaxes/fjsx15/literal.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/class.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/function.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/function-call.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/constant.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/variable.sublime-syntax

  optional-tail:
    - include: comment-no-pop
    - include: globals
    # Property access and function call.
    - match: (?=\s*[\[(])
      set: [ optional-tail, tail ]
    # Other operators. At this point, operators will have a higher priority than
    # regex literals.
    - include: Packages/Naomi/syntaxes/fjsx15/operator.sublime-syntax
    # Anything else not expected.
    - match: (?=\s*\S)
      pop: true

  tail:
    - include: comment-no-pop
    - include: Packages/Naomi/syntaxes/fjsx15/property-access.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/function-call/arguments.sublime-syntax
