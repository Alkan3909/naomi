%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  expressionGroupBegin: |
    (\()
    (?!\s*
      (?> {{commonIdentifier}}:
        | \)\s*=>
      )
    )

contexts:
  main:
    - match: ""
      set: [
        optional-operator,
        loop-begin
      ]

  loop-begin:
    # Open new expression group.
    - match: |
        (?xi)\s*
        {{expressionGroupBegin}}
      captures:
        1: punctuation.delimiter.expression.group.a.begin.js.fjsx15
      set: open-b-close-a
    # Expression contents.
    - match: ""
      set: [
        optional-operator,
        type-definitions
      ]

  open-a-close-b:
    # Open new expression group.
    - match: |
        (?xi)\s*
        {{expressionGroupBegin}}
      captures:
        1: punctuation.delimiter.expression.group.a.begin.js.fjsx15
      push: open-b-close-a
    # Close current expression group.
    - match: \s*(\))
      captures:
        1: punctuation.delimiter.expression.group.b.end.js.fjsx15
      pop: true
    # Expression contents.
    - match: ""
      push: [
        optional-operator,
        type-definitions
      ]

  open-b-close-a:
    # Open new expression group.
    - match: |
        (?xi)\s*
        {{expressionGroupBegin}}
      captures:
        1: punctuation.delimiter.expression.group.b.begin.js.fjsx15
      push: open-a-close-b
    # Close current expression group.
    - match: \s*(\))
      captures:
        1: punctuation.delimiter.expression.group.a.end.js.fjsx15
      pop: true
    # Expression contents.
    - match: ""
      push: [
        optional-operator,
        type-definitions
      ]

  type-definitions:
    - match: \s*(\*)
      captures:
        1: keyword.operator.other.existential.flowtype
      pop: true
    # Enveloped nullable.
    - match: |
        (?x)
        \s*(\?)
        \s*(\()
      captures:
        1: keyword.operator.other.nullable.flowtype
        2: punctuation.delimiter.nullable.begin.flowtype
      set: [
        enveloped-nullable-end,
        optional-operator,
        type-definitions
      ]
    # Nullable.
    - match: \s*\?
      scope: keyword.operator.other.nullable.flowtype
    # Normal type.
    - include: comment
    - include: Packages/Naomi/syntaxes/fjsx15/literal/string/double-quoted.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/literal/string/single-quoted.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/type/function.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/type/object.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/type/tuple.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/type/simple.sublime-syntax

  optional-operator:
    - include: comment
    - match: |
        (?x)
        \s*(&)
        (?!
          (?> &
            | =
          )
        )
      captures:
        1: keyword.operator.other.intersection.flowtype
      set: main
    - match: |
        (?x)
        \s*(\|)
        (?!
          (?> \|
            | =
            | \s*}
          )
        )
      captures:
        1: keyword.operator.other.union.flowtype
      set: main
    - match: (?=\S)
      pop: true

  enveloped-nullable-end:
    - match: \)
      scope: punctuation.delimiter.nullable.end.flowtype
      pop: true

  comment:
    - include: Packages/Naomi/syntaxes/fjsx15/comment.no-pop.sublime-syntax
