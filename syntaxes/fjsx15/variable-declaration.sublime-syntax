%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  templateArguments: |
    (<
      [^<>]*
      \g<-1>?
      [^<>]*
    >)

  parameters: |
    (\(
      [^()]*
      \g<-1>?
      [^()]*
    \))

  flowOperators: |
    (?> &(?!&)
      | \|(?!\|)
    )

  string: |
    (?> '.*?'
      | ".*?"
      | `.*`
    )

  simpleFlowType: |
    (?> {{string}}
      | {{commonIdentifier}}
        {{templateArguments}}?
    )

  flowFunction: |
    (
      {{parameters}}
      \s*=>\s*
      (?> {{simpleFlowType}}
        | \g<-2>
      )
    )

  complexType: |
    (
      \??\s*
      (?> {{simpleFlowType}}
        | {{flowFunction}}
      )
      \s*{{flowOperators}}?
      \s*\g<-5>?
    )

  flowComment: /\*\s*:.*?\*/

  type: |
    (?> {{flowComment}}
      | :{{complexType}}
    )

contexts:
  main:
    # Normal arrow function assigned to variable.
    - match: |
        (?x)
        (?=
          \s*(?>const|let|var)\b
          \s*{{commonIdentifier}}
          \s*=
          \s*(?:async\b)?
          \s*{{templateArguments}}?
          \s*{{parameters}}
          \s*{{type}}?
          \s*=>
        )
      set: [
        normal-arrow-function,
        function-identifier,
        keyword
      ]
    # Single parameter arrow function assigned to variable.
    - match: |
        (?x)
        (?=
          \s*(?>const|let|var)\b
          \s*{{commonIdentifier}}
          \s*=
          \s*(?:async\b)?
          \s*{{commonIdentifier}}
          \s*{{type}}?
          \s*=>
        )
      set: [
        single-parameter-arrow-function,
        function-identifier,
        keyword
      ]
    # Function assigned to variable.
    - match: |
        (?x)
        (?=
          \s*(?>const|let|var)\b
          \s*{{commonIdentifier}}
          \s*=
          \s*(?:async\b)?
          \s*function
        )
      set: [
        function,
        function-identifier,
        keyword
      ]

    # Normal variable declaration.
    - match: |
        (?x)
        (?=\s*(?>const|let|var)\b)
      set: [
        optional-type,
        variables,
        keyword
      ]

  comment-no-pop:
    - include: Packages/Naomi/syntaxes/fjsx15/comment.no-pop.sublime-syntax

  keyword:
    - include: comment-no-pop
    - match: |
        (?x)\s*
        ((?>const|let|var))
      captures:
        1: >-
          storage.type.js.fjsx15
          keyword.declaration.variable.js.fjsx15
      pop: true

  function:
    - include: Packages/Naomi/syntaxes/fjsx15/function.sublime-syntax

  function-identifier:
    - match: |
        (?xi)
        \s*({{commonIdentifier}})
        \s*(=)
      captures:
        0: meta.function.declaration.js.fjsx15
        1: entity.name.function.js.fjsx15
        2: punctuation.definition.function.assignment.js.fjsx1
      pop: true

  normal-arrow-function:
    - include: Packages/Naomi/syntaxes/fjsx15/async.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/template/parameters.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/arrow-function/parameters.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/arrow-function/body.sublime-syntax

  single-parameter-arrow-function:
    - include: Packages/Naomi/syntaxes/fjsx15/async.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/function/parameter/simple.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/arrow-function/body.sublime-syntax

  variables:
    - include: comment-no-pop
    - include: Packages/Naomi/syntaxes/fjsx15/destructuring/array.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/destructuring/object.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/constant.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/variable.sublime-syntax

  optional-type:
    - include: comment-no-pop
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/optional-associated-type.sublime-syntax
