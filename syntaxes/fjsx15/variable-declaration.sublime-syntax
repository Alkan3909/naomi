%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  constantIdentifier: |
    [$_[:upper:]]
    [$_[:upper:][:digit:]]*

  templateArguments: |
    (<
      [^<>]*
      \g<-1>?
      [^<>]*
    >)

  parameters: |
    (\(
      [^()]*
      \g<-1>?
      [^()]*
    \))

  flowOperators: |
    (?> &(?!&)
      | \|(?!\|)
    )

  string: |
    (?> '.*?'
      | ".*?"
      | `.*`
    )

  simpleFlowType: |
    (?> {{string}}
      | {{commonIdentifier}}
        {{templateArguments}}?
    )

  flowFunction: |
    (
      {{parameters}}
      \s*=>\s*
      (?> {{simpleFlowType}}
        | \g<-2>
      )
    )

  complexType: |
    (
      \??\s*
      (?> {{simpleFlowType}}
        | {{flowFunction}}
      )
      \s*{{flowOperators}}?
      \s*\g<-5>?
    )

  flowComment: /\*\s*:.*?\*/

  type: |
    (?> {{flowComment}}
      | :{{complexType}}
    )

contexts:
  main:
    - match: |
        (?x)
        (?=\s*(?>const|let|var)\b)
      set: [
        optional-type-and-initial-value,
        variable-or-constant,
        keyword
      ]

  comment-no-pop:
    - include: Packages/Naomi/syntaxes/fjsx15/comment.no-pop.sublime-syntax

  optional-expression:
    - include: Packages/Naomi/syntaxes/fjsx15/optional-expression.sublime-syntax

  associated-type:
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/associated-type.sublime-syntax

  optional-type-and-initial-value:
    - meta_scope: meta.declaration.variable.js.fjsx15
    - match: (?=\s*:)
      push: associated-type
    - match: \s*(,)
      captures:
        1: punctuation.separator.js.fjsx15
      push: variable-or-constant
    - match: (?=\s*=)
      push: optional-expression
    - match: (?=\s*\S)
      pop: true

  keyword:
    - match: |
        (?x)\s*
        ((?>const|let|var))
      captures:
        1: storage.type.js.fjsx15
      pop: true

  variable-or-constant:
    - include: comment-no-pop
    - include: Packages/Naomi/syntaxes/fjsx15/destructuring/array.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/destructuring/object.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/variable.sublime-syntax#function-assigned-to-variable
    - include: constant
    - include: variable

  optional-type:
    - include: comment-no-pop
    - include: Packages/Naomi/syntaxes/fjsx15/flowtype/optional-associated-type.sublime-syntax

  constant:
    # Single character.
    - match: |
        (?x)\s*
        (\#)?
        ([_[:upper:]])\b
      captures:
        1: storage.modifier.js.fjsx15
        2: entity.name.constant.js.fjsx15
      pop: true
    # Two or more characters.
    - match: |
        (?x)\s*
        (\#)?
        (
          {{constantIdentifier}}
          (?> \$\B
            | [_[:upper:][:digit:]]\b
          )
        )
      captures:
        1: storage.modifier.js.fjsx15
        2: entity.name.constant.js.fjsx15
      pop: true

  variable:
    # Single character.
    - match: |
        (?xi)\s*
        (\#)?
        ((?> \$\B
          | [_[:alpha:]]\b
        ))
      captures:
        1: storage.modifier.js.fjsx15
        2: entity.name.variable.js.fjsx15
      pop: true
    # Two or more characters.
    - match: |
        (?xi)\s*
        (\#)?
        (
          {{commonIdentifier}}
          (?> \$\B
            | [_[:alnum:]]\b
          )
        )
      captures:
        1: storage.modifier.js.fjsx15
        2: entity.name.variable.js.fjsx15
      pop: true
