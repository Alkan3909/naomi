%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  constantIdentifier: |
    [$_[:upper:]]
    [$_[:upper:][:digit:]]*

  indexer: |
    (\[
      [^\[\]]*
      \g<-1>?
      [^\[\]]*
    \])

  methodIdentifier: |
    (?> '.*?(?<!\\)'
      | ".*?(?<!\\)"
      | `.*?(?<!\\)`
      | {{indexer}}
      | {{commonIdentifier}}
    )

  templateArguments: |
    (<
      [^<>]*
      \g<-1>?
      [^<>]*
    >)

  templateParameters: "{{templateArguments}}"

  parameters: |
    (\(
      [^()]*
      \g<-1>?
      [^()]*
    \))

  flowOperators: |
    (?> &(?!&)
      | \|(?!\|)
    )

  string: |
    (?> '.*?'
      | ".*?"
      | `.*`
    )

  simpleFlowType: |
    (?> {{string}}
      | {{commonIdentifier}}
        {{templateArguments}}?
    )

  flowFunction: |
    (
      {{parameters}}
      \s*=>\s*
      (?> {{simpleFlowType}}
        | \g<-2>
      )
    )

  complexType: |
    (
      \??\s*
      (?> {{simpleFlowType}}
        | {{flowFunction}}
      )
      \s*{{flowOperators}}?
      \s*\g<-5>?
    )

  flowComment: /\*\s*:.*?\*/

  type: |
    (?> {{flowComment}}
      | :{{complexType}}
    )

contexts:
  main:
    # Function assigned to property.
    - match: |
        (?xi)
        (?=
          \s*{{commonIdentifier}}
          \s*:
          (?:\s*async\b)?
          \s*function
        )
      set: [
        function-declaration,
        function-keyword,
        method-identifier
      ]
    # Single parameter arrow function assigned to property.
    - match: |
        (?xi)
        (?=
          \s*{{commonIdentifier}}
          \s*:
          (?:\s*async\b)?
          \s*{{commonIdentifier}}
          \s*{{type}}?
          \s*=>
        )
      set: [
        arrow-function,
        method-identifier
      ]
    # Arrow function assigned to property.
    - match: |
        (?xi)
        (?=
          \s*{{commonIdentifier}}
          \s*:
          (?:\s*async\b)?
          \s*{{templateParameters}}?
          \s*{{parameters}}
          \s*=>
        )
      set: [
        arrow-function,
        method-identifier
      ]
    # Computed property name.
    - match: \s*(\[)
      captures:
        1: punctuation.definition.object.computed-property.begin.js.fjsx15
      set: [
        associated-value,
        computed-property-end,
        optional-expression
      ]
    # String.
    - match: (?=\s*['"`])
      set: [ associated-value, string ]
    # Simple property.
    - include: constant
    - include: variable

  method-identifier:
    - match: |
        (?xi)
        \s*({{commonIdentifier}})
        \s*(:)
      captures:
        1: entity.name.function.js.fjsx15
        2: punctuation.separator.key-value.js.fjsx15
      pop: true

  arrow-function:
    - include: Packages/Naomi/syntaxes/fjsx15/arrow-function.sublime-syntax

  function-keyword:
    - include: Packages/Naomi/syntaxes/fjsx15/function.sublime-syntax#keyword

  function-declaration:
    - include: Packages/Naomi/syntaxes/fjsx15/function.sublime-syntax#declaration

  computed-property-end:
    - match: \s*(\])
      captures:
        1: punctuation.definition.object.computed-property.end.js.fjsx15
      pop: true

  string:
    - include: Packages/Naomi/syntaxes/fjsx15/literal/string/double-quoted.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/literal/string/single-quoted.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/literal/string/template.sublime-syntax

  constant:
    # Single character.
    - match: |
        (?x)\s*
        ([_[:upper:]])\b
      captures:
        1: >-
          object.property.js.fjsx15
          entity.name.constant.js.fjsx15
      set: associated-value
    # Two or more characters.
    - match: |
        (?x)\s*
        (
          {{constantIdentifier}}
          (?> \$\B
            | [_[:upper:]]\b
          )
        )
      captures:
        1: >-
          object.property.js.fjsx15
          entity.name.constant.js.fjsx15
      set: associated-value

  variable:
    # Single character.
    - match: |
        (?xi)\s*
        ((?> \$\B
          | [_[:alpha:]]\b
        ))
      captures:
        1: >-
          object.property.js.fjsx15
          entity.name.variable.js.fjsx15
      set: associated-value
    # Two or more characters.
    - match: |
        (?xi)\s*
        (
          {{commonIdentifier}}
          (?> \$\B
            | [_[:alnum:]]\b
          )
        )
      captures:
        1: >-
          object.property.js.fjsx15
          entity.name.variable.js.fjsx15
      set: associated-value

  optional-expression:
    - include: Packages/Naomi/syntaxes/fjsx15/optional-expression.sublime-syntax

  associated-value:
    - match: \s*(:)
      captures:
        1: punctuation.separator.key-value.js.fjsx15
      set: optional-expression
